name: CI

on:
  push:
    branches:
      - master
  pull_request_target:
    branches:
      - master

defaults:
  run:
    shell: bash

jobs:
  gate:
    name: Approval Gate

    runs-on: ubuntu-latest

    steps:
      - name: Get User Permission
        if: ${{ github.event_name == 'pull_request_target' }}
        id: checkAccess
        uses: actions-cool/check-user-permission@7b90a27f92f3961b368376107661682c441f6103
        with:
          require: write
          username: ${{ github.triggering_actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check User Permission
        if: ${{ github.event_name == 'pull_request_target' && steps.checkAccess.outputs.require-result == 'false' }}
        run: |
          echo "For security purposes, ${{ github.triggering_actor }} does not have the required permissions on this repository to safely run this workflow."
          echo "Current permission level is ${{ steps.checkAccess.outputs.user-permission }}."
          echo "Please wait for a collaborator to review your code and re-trigger this workflow."
          exit 1

  check:
    name: Check

    needs: gate

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download actionlint
        id: actionlint
        run:
          bash <(curl
          https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)

      - name: Check workflow
        run: ${{ steps.actionlint.outputs.executable }} -color

  client:
    name: Client

    needs: gate

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9.0.6

      - name: Info
        run: |
          node --version
          pnpm --version

      - name: Install dependencies
        run: pnpm i --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Format
        run: pnpm run format-check

      - name: Lint
        run: pnpm run lint

      - name: Test (unit)
        run: pnpm run test --reporter verbose

      - name: Test (e2e)
        run: pnpm run cy:e2e

  coverage:
    name: Coverage

    needs: gate

    runs-on: macos-latest

    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      RUSTFLAGS: --deny warnings
      MS_CLIENT_ID: ${{ secrets.MS_CLIENT_ID }}
      MS_CLIENT_SECRET: ${{ secrets.MS_CLIENT_SECRET }}
      MS_REDIRECT_URI: ${{ secrets.MS_REDIRECT_URI }}

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9.0.6

      - name: Install dependencies
        run: pnpm i --frozen-lockfile

      - name: Install toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          components: llvm-tools-preview

      - uses: Swatinem/rust-cache@v2

      - name: Info
        run: |
          cargo --version
          node --version
          pnpm --version
          rustup --version

      - name: Install mongodb
        run: |
          brew tap mongodb/brew
          brew install mongodb-community@7.0
          echo -e 'replication:\n  replSetName: rs0' >> /opt/homebrew/etc/mongod.conf
          brew services start mongodb-community@7.0
          mongosh --eval 'rs.initiate()'

      - name: Install grcov
        run: cargo install grcov

      - name: Run coverage script
        run: ./bin/coverage release

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          files: coverage/*.lcov

  server:
    name: Server

    needs: gate

    runs-on: macos-latest

    env:
      RUSTFLAGS: --deny warnings
      MS_CLIENT_ID: ${{ secrets.MS_CLIENT_ID }}
      MS_CLIENT_SECRET: ${{ secrets.MS_CLIENT_SECRET }}
      MS_REDIRECT_URI: ${{ secrets.MS_REDIRECT_URI }}

    steps:
      - uses: actions/checkout@v4

      - name: Install rust toolchain components
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          toolchain: stable

      - uses: Swatinem/rust-cache@v2

      - name: Install mongodb
        run: |
          brew tap mongodb/brew
          brew install mongodb-community@7.0
          echo -e 'replication:\n  replSetName: rs0' >> /opt/homebrew/etc/mongod.conf
          brew services start mongodb-community@7.0
          mongosh --eval 'rs.initiate()'

      - name: Info
        run: |
          rustup --version
          cargo --version
          cargo clippy --version

      - name: Forbid
        run: |
          brew install ripgrep
          ./bin/forbid

      - name: Build
        run: cargo build --workspace --all-features --all-targets

      - name: Lockfile
        run: cargo update --locked --package server

      - name: Lint
        run: ./bin/clippy

      - name: Format
        run: cargo fmt --all -- --check

      - name: Test
        run: cargo test --workspace --all-features --all-targets
